
// ====================================
// Functions
// ====================================

// Image path
@function image-url($name) {
    @return unquote("url(/build/img/" + $name + ")");
}

// px to rem
// Only used in case of emergency!!!
@function rem($size) {
    $remSize: $size / $font-size-root;
    @return #{$remSize}rem;
}

// Replace `$search` with `$replace` in `$string`
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}
@function encode-hex($color) {
    @return str-replace(unquote("#{$color}"), "#", "%23");
}


// ====================================
// Mixins
// ====================================

// Positioning

@mixin translate($x, $y) {
    transform: translate($x, $y);
}
@mixin translateX($x) {
    transform: translate($x, 0);
}
@mixin translateY($y) {
    transform: translate(0, $y);
}

@mixin horizontal-align($position: relative) {
	position: $position;
	left: 50%;
	@include translateX(-50%);
}
@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	@include translateY(-50%);
}
@mixin center-align($position: relative) {
	position: $position;
	top: 50%;
	left: 50%;
	@include translate(-50%, -50%);
}

@mixin clearfix-micro() {
    &:before,
    &:after {
        content: attr(name) "";
        display: table;
    }
    &:after {
        clear: both;
    }
    & {
        zoom: 1; /* For IE 6/7 (trigger hasLayout) */
    }
}

@mixin center-content() {
    text-align: center;

    .form-group:not(.avatar) {
        margin-left: auto;
        margin-right: auto;
        text-align: left;
    }
}


// Styling

@mixin bg-icon($name, $width: false, $height: false, $boxed: false) {
    @if $boxed {
        width: $width;
        height: $height;
    }
    background-image: $name;
    @if $width and $height {
        background-size: $width $height;
    	background-repeat: no-repeat;
    	background-position: center center;
    }
}

@mixin image-2x($name, $type, $width: auto, $height: auto) {
    $image: $name + '.' + $type;
    background-image: image-url($image);

    @if ($width == 'auto' and $height == 'auto') {
        background-size: cover;
    } @else {
        background-size: $width $height;
    }

    @media (min--moz-device-pixel-ratio: 1.3),
      (-o-min-device-pixel-ratio: 2.6/2),
      (-webkit-min-device-pixel-ratio: 1.3),
      (min-device-pixel-ratio: 1.3),
      (min-resolution: 1.3dppx) {
        /* on retina, use image that's scaled by 2 */
        $image-2x: $name + '@2x.' + $type;
        background-image: image-url($image-2x);
    }
}

@mixin box-shadow($properties...) {
    @include prefixer(box-shadow, $properties, webkit moz spec);
}

@mixin border-top-left-radius($border-radius) {
    @include prefixer(border-top-left-radius, $border-radius, webkit moz spec);
}
@mixin border-top-right-radius($border-radius) {
    @include prefixer(border-top-right-radius, $border-radius, webkit moz spec);
}
@mixin border-bottom-right-radius($border-radius) {
    @include prefixer(border-bottom-right-radius, $border-radius, webkit moz spec);
}
@mixin border-bottom-left-radius($border-radius) {
    @include prefixer(border-bottom-left-radius, $border-radius, webkit moz spec);
}

@mixin inverse-color() {
	h1, .h1,
	h2, .h2,
	h3, .h3,
	h4, .h4,
	h5, .h5,
	h6, .h6 {
		&, a {
			color: $white;

			strong {
				color: white;
			}
		}
	}
	p,
	a,
	a:hover {
		color: white;
	}
}

@mixin link-dark() {
    color: $gray-dark;

    @include hover-focus {
        color: $brand-primary;
    }
}

@mixin opacity($level) {
    filter: alpha(opacity = $level * 100);
    opacity: $level;
}

@mixin darken($img, $opacity) {
	background: linear-gradient(rgba(0, 0, 0, $opacity), rgba(0, 0, 0, $opacity)), url('$img')
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}
@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

@mixin headings {
    h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .table thead, .h5, .h6 {
        @content;
    }
}

@mixin hyphenate() {
    white-space: normal;
	word-break: break-all;
	@include hyphens(auto);
}

@mixin ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin button-reset() {
    margin: 0;
    padding: 0;
    background-color: transparent;
    border: none;
    outline: none !important;
	text-shadow: none;
	@include box-shadow(none);
	text-decoration: none;
	-ms-touch-action: manipulation;
	touch-action: manipulation;
	user-select: none;
}
@mixin list-unstyled() {
    margin: 0;
    padding: 0;
    list-style: none;
}

@mixin filter-gradient($a, $b, $direction) {
    $type: 1;
    @if ($direction == "vertical") {
        $type: 0;
    }

    background-color: mix($a, $b, 50%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$a}', endColorstr='#{$a}',GradientType=#{$type} );
}

